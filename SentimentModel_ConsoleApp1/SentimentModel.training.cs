// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace SentimentModel_ConsoleApp1
{
    public partial class SentimentModel
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"QiShu", @"QiShu"),new InputOutputColumnPair(@"AAA002", @"AAA002"),new InputOutputColumnPair(@"AAA003", @"AAA003"),new InputOutputColumnPair(@"AAA004", @"AAA004"),new InputOutputColumnPair(@"AAA005", @"AAA005"),new InputOutputColumnPair(@"AAA006", @"AAA006"),new InputOutputColumnPair(@"AAE001", @"AAE001"),new InputOutputColumnPair(@"Year", @"Year")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"QiShu",@"AAA002",@"AAA003",@"AAA004",@"AAA005",@"AAA006",@"AAE001",@"Year"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"AAA001",inputColumnName:@"AAA001"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=20,NumberOfTrees=4,MaximumBinCountPerFeature=254,FeatureFraction=1,LearningRate=0.1,LabelColumnName=@"AAA001",FeatureColumnName=@"Features"}),labelColumnName: @"AAA001"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
