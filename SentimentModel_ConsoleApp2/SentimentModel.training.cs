// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;
using System.Data.SqlClient;

namespace SentimentModel_ConsoleApp2
{
    public partial class SentimentModel
    {
        public static IDataView LoadData(MLContext mlContext)
        {
            var connectionString = @"Data Source=.;Initial Catalog=LotteryDB;Integrated Security=True";
            var commandText = @"SELECT CAST([QiShu] as REAL), CAST([AAA001] as REAL), CAST([AAA002] as REAL), CAST([AAA003] as REAL), CAST([AAA004] as REAL), CAST([AAA005] as REAL), CAST([AAA006] as REAL), CAST([AAE001] as REAL), CAST([Year] as REAL) FROM [dbo].[T_CaiPiao]";

            DatabaseLoader loader = mlContext.Data.CreateDatabaseLoader<ModelInput>();
            DatabaseSource dbSource = new DatabaseSource(SqlClientFactory.Instance, connectionString, commandText);
           
            return loader.Load(dbSource);
        }
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"QiShu", @"QiShu"),new InputOutputColumnPair(@"AAA001", @"AAA001"),new InputOutputColumnPair(@"AAA002", @"AAA002"),new InputOutputColumnPair(@"AAA003", @"AAA003"),new InputOutputColumnPair(@"AAA004", @"AAA004"),new InputOutputColumnPair(@"AAA005", @"AAA005"),new InputOutputColumnPair(@"AAA006", @"AAA006"),new InputOutputColumnPair(@"Year", @"Year")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"QiShu",@"AAA001",@"AAA002",@"AAA003",@"AAA004",@"AAA005",@"AAA006",@"Year"}))      
                                    .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options(){NumberOfTrees=4,NumberOfLeaves=4,FeatureFraction=1F,LabelColumnName=@"AAE001",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
